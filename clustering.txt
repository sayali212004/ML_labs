import pandas as pd
import matplotlib.pyplot as plt

df=pd.read_csv('Mall_Customers.csv')

df.head()

x = df.iloc[:,3:] #[all the rows,3 onwards all cols]

x

plt.title('unclustered data')
plt.xlabel('Annual Income')
plt.ylabel('Spending Score')
plt.scatter(x['Annual Income (k$)'],x['Spending Score (1-100)'])
#unlabelled daat

#clustered data-labelled data
from sklearn.cluster import KMeans, AgglomerativeClustering

km=KMeans(n_clusters=3) #no of clusters 3 . ie k=3
km.fit_predict(x)
#in op having same no are connected points

x.shape

km.inertia_
#sum squared error vary with k (SSE)

sse=[]
for k in range (1,16):
    km=KMeans(n_clusters=k)
    km.fit_predict(x)
    sse.append(km.inertia_)

sse

print(len(sse))

plt.title('Elbow mtd')
plt.xlabel('val of k')
plt.ylabel('SSE')
plt.grid()
plt.xticks(range(1,16))
plt.plot(range(1,16),sse,marker='.',color='red')

# silhoutte mtd/score range betn [-1,1]
# +1 = indicates point is away from its neighboring cluster
# -1 = indicates point is close to its neighboring cluster
# silhoutte point more nearest the cluster points

from sklearn.metrics import silhouette_score

silh=[]
for k in range (2,16):
    km=KMeans(n_clusters=k)
    km.fit_predict(x)
    labels=km.fit_predict(x)
    score=silhouette_score(x, labels)
    silh.append(score)

silh

#barplot
plt.title('silhouette mtd')
plt.xlabel('val of k')
plt.ylabel('silhouette score')
plt.grid()
plt.xticks(range(2,16))
plt.bar(range(2,16),silh,color='red')

km=KMeans(n_clusters= 5,random_state=0)

labels=km.fit_predict(x)

labels

km.cluster_centers_

cent=km.cluster_centers_

plt.figure(figsize=(16,9))
plt.subplot(1,2,1) #(row,col,plot no)
plt.title('unclustered data')
plt.xlabel('Annual Income')
plt.ylabel('Spending Score')
plt.scatter(x['Annual Income (k$)'],x['Spending Score (1-100)'])

plt.subplot(1,2,2) #(row,col,plot no)
plt.title('clustered data')
plt.xlabel('Annual Income')
plt.ylabel('Spending Score')
plt.scatter(x['Annual Income (k$)'],x['Spending Score (1-100)'],c=labels)
plt.scatter(cent[:,0],cent[:,1],s=150,color='k') #k=black s=size
# c=labels ie points having same label no will have same color

km.inertia_

km.labels_

df

#seperate out cluster
df[labels==4]

#to save this cluster seperately
four = df[labels==4]
four.to_csv('my_clust_4.csv')

 km.predict([[46,78]])

